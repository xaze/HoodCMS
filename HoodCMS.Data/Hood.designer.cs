#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30128.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HoodCMS.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Hood")]
	public partial class HoodDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertQuote(Quote instance);
    partial void UpdateQuote(Quote instance);
    partial void DeleteQuote(Quote instance);
    partial void InsertPhoneType(PhoneType instance);
    partial void UpdatePhoneType(PhoneType instance);
    partial void DeletePhoneType(PhoneType instance);
    partial void InsertPhone(Phone instance);
    partial void UpdatePhone(Phone instance);
    partial void DeletePhone(Phone instance);
    partial void InsertOccasion(Occasion instance);
    partial void UpdateOccasion(Occasion instance);
    partial void DeleteOccasion(Occasion instance);
    partial void InsertEntityPhone(EntityPhone instance);
    partial void UpdateEntityPhone(EntityPhone instance);
    partial void DeleteEntityPhone(EntityPhone instance);
    partial void InsertEntityCategory(EntityCategory instance);
    partial void UpdateEntityCategory(EntityCategory instance);
    partial void DeleteEntityCategory(EntityCategory instance);
    partial void InsertEntityAddress(EntityAddress instance);
    partial void UpdateEntityAddress(EntityAddress instance);
    partial void DeleteEntityAddress(EntityAddress instance);
    partial void InsertEntity(Entity instance);
    partial void UpdateEntity(Entity instance);
    partial void DeleteEntity(Entity instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertArticleCategory(ArticleCategory instance);
    partial void UpdateArticleCategory(ArticleCategory instance);
    partial void DeleteArticleCategory(ArticleCategory instance);
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    #endregion
		
		public HoodDataContext() : 
				base(global::HoodCMS.Data.Properties.Settings.Default.HoodConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HoodDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HoodDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HoodDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HoodDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Quote> Quotes
		{
			get
			{
				return this.GetTable<Quote>();
			}
		}
		
		public System.Data.Linq.Table<PhoneType> PhoneTypes
		{
			get
			{
				return this.GetTable<PhoneType>();
			}
		}
		
		public System.Data.Linq.Table<Phone> Phones
		{
			get
			{
				return this.GetTable<Phone>();
			}
		}
		
		public System.Data.Linq.Table<Occasion> Occasions
		{
			get
			{
				return this.GetTable<Occasion>();
			}
		}
		
		public System.Data.Linq.Table<EntityPhone> EntityPhones
		{
			get
			{
				return this.GetTable<EntityPhone>();
			}
		}
		
		public System.Data.Linq.Table<EntityCategory> EntityCategories
		{
			get
			{
				return this.GetTable<EntityCategory>();
			}
		}
		
		public System.Data.Linq.Table<EntityAddress> EntityAddresses
		{
			get
			{
				return this.GetTable<EntityAddress>();
			}
		}
		
		public System.Data.Linq.Table<Entity> Entities
		{
			get
			{
				return this.GetTable<Entity>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<ArticleCategory> ArticleCategories
		{
			get
			{
				return this.GetTable<ArticleCategory>();
			}
		}
		
		public System.Data.Linq.Table<Article> Articles
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Quotes")]
	public partial class Quote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuoteId;
		
		private System.Guid _QuoteUserId;
		
		private string _Quote1;
		
		private System.DateTime _QuoteDate;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuoteIdChanging(int value);
    partial void OnQuoteIdChanged();
    partial void OnQuoteUserIdChanging(System.Guid value);
    partial void OnQuoteUserIdChanged();
    partial void OnQuote1Changing(string value);
    partial void OnQuote1Changed();
    partial void OnQuoteDateChanging(System.DateTime value);
    partial void OnQuoteDateChanged();
    #endregion
		
		public Quote()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuoteId
		{
			get
			{
				return this._QuoteId;
			}
			set
			{
				if ((this._QuoteId != value))
				{
					this.OnQuoteIdChanging(value);
					this.SendPropertyChanging();
					this._QuoteId = value;
					this.SendPropertyChanged("QuoteId");
					this.OnQuoteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid QuoteUserId
		{
			get
			{
				return this._QuoteUserId;
			}
			set
			{
				if ((this._QuoteUserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuoteUserIdChanging(value);
					this.SendPropertyChanging();
					this._QuoteUserId = value;
					this.SendPropertyChanged("QuoteUserId");
					this.OnQuoteUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Quote", Storage="_Quote1", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Quote1
		{
			get
			{
				return this._Quote1;
			}
			set
			{
				if ((this._Quote1 != value))
				{
					this.OnQuote1Changing(value);
					this.SendPropertyChanging();
					this._Quote1 = value;
					this.SendPropertyChanged("Quote1");
					this.OnQuote1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime QuoteDate
		{
			get
			{
				return this._QuoteDate;
			}
			set
			{
				if ((this._QuoteDate != value))
				{
					this.OnQuoteDateChanging(value);
					this.SendPropertyChanging();
					this._QuoteDate = value;
					this.SendPropertyChanged("QuoteDate");
					this.OnQuoteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Quote", Storage="_aspnet_User", ThisKey="QuoteUserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Quotes.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Quotes.Add(this);
						this._QuoteUserId = value.UserId;
					}
					else
					{
						this._QuoteUserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhoneType")]
	public partial class PhoneType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhonetypeId;
		
		private string _PhoneTypeName;
		
		private EntitySet<Phone> _Phones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhonetypeIdChanging(int value);
    partial void OnPhonetypeIdChanged();
    partial void OnPhoneTypeNameChanging(string value);
    partial void OnPhoneTypeNameChanged();
    #endregion
		
		public PhoneType()
		{
			this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhonetypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PhonetypeId
		{
			get
			{
				return this._PhonetypeId;
			}
			set
			{
				if ((this._PhonetypeId != value))
				{
					this.OnPhonetypeIdChanging(value);
					this.SendPropertyChanging();
					this._PhonetypeId = value;
					this.SendPropertyChanged("PhonetypeId");
					this.OnPhonetypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneTypeName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PhoneTypeName
		{
			get
			{
				return this._PhoneTypeName;
			}
			set
			{
				if ((this._PhoneTypeName != value))
				{
					this.OnPhoneTypeNameChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeName = value;
					this.SendPropertyChanged("PhoneTypeName");
					this.OnPhoneTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneType_Phone", Storage="_Phones", ThisKey="PhonetypeId", OtherKey="PhoneTypeId")]
		public EntitySet<Phone> Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				this._Phones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = this;
		}
		
		private void detach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phone")]
	public partial class Phone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhoneId;
		
		private System.Nullable<int> _PhoneTypeId;
		
		private string _PhoneNumber;
		
		private EntitySet<EntityPhone> _EntityPhones;
		
		private EntityRef<PhoneType> _PhoneType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneIdChanging(int value);
    partial void OnPhoneIdChanged();
    partial void OnPhoneTypeIdChanging(System.Nullable<int> value);
    partial void OnPhoneTypeIdChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public Phone()
		{
			this._EntityPhones = new EntitySet<EntityPhone>(new Action<EntityPhone>(this.attach_EntityPhones), new Action<EntityPhone>(this.detach_EntityPhones));
			this._PhoneType = default(EntityRef<PhoneType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PhoneId
		{
			get
			{
				return this._PhoneId;
			}
			set
			{
				if ((this._PhoneId != value))
				{
					this.OnPhoneIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneId = value;
					this.SendPropertyChanged("PhoneId");
					this.OnPhoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneTypeId", DbType="Int")]
		public System.Nullable<int> PhoneTypeId
		{
			get
			{
				return this._PhoneTypeId;
			}
			set
			{
				if ((this._PhoneTypeId != value))
				{
					if (this._PhoneType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeId = value;
					this.SendPropertyChanged("PhoneTypeId");
					this.OnPhoneTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phone_EntityPhone", Storage="_EntityPhones", ThisKey="PhoneId", OtherKey="PhoneId")]
		public EntitySet<EntityPhone> EntityPhones
		{
			get
			{
				return this._EntityPhones;
			}
			set
			{
				this._EntityPhones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhoneType_Phone", Storage="_PhoneType", ThisKey="PhoneTypeId", OtherKey="PhonetypeId", IsForeignKey=true)]
		public PhoneType PhoneType
		{
			get
			{
				return this._PhoneType.Entity;
			}
			set
			{
				PhoneType previousValue = this._PhoneType.Entity;
				if (((previousValue != value) 
							|| (this._PhoneType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneType.Entity = null;
						previousValue.Phones.Remove(this);
					}
					this._PhoneType.Entity = value;
					if ((value != null))
					{
						value.Phones.Add(this);
						this._PhoneTypeId = value.PhonetypeId;
					}
					else
					{
						this._PhoneTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PhoneType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntityPhones(EntityPhone entity)
		{
			this.SendPropertyChanging();
			entity.Phone = this;
		}
		
		private void detach_EntityPhones(EntityPhone entity)
		{
			this.SendPropertyChanging();
			entity.Phone = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Occasion")]
	public partial class Occasion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OccasionId;
		
		private string _OccasionName;
		
		private System.Nullable<int> _EntityId;
		
		private string _OccasionDescription;
		
		private System.Guid _OccasionPostedByUserId;
		
		private System.DateTime _OccasionStartDate;
		
		private System.DateTime _OccasionEndDate;
		
		private EntityRef<Entity> _Entity;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOccasionIdChanging(int value);
    partial void OnOccasionIdChanged();
    partial void OnOccasionNameChanging(string value);
    partial void OnOccasionNameChanged();
    partial void OnEntityIdChanging(System.Nullable<int> value);
    partial void OnEntityIdChanged();
    partial void OnOccasionDescriptionChanging(string value);
    partial void OnOccasionDescriptionChanged();
    partial void OnOccasionPostedByUserIdChanging(System.Guid value);
    partial void OnOccasionPostedByUserIdChanged();
    partial void OnOccasionStartDateChanging(System.DateTime value);
    partial void OnOccasionStartDateChanged();
    partial void OnOccasionEndDateChanging(System.DateTime value);
    partial void OnOccasionEndDateChanged();
    #endregion
		
		public Occasion()
		{
			this._Entity = default(EntityRef<Entity>);
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccasionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OccasionId
		{
			get
			{
				return this._OccasionId;
			}
			set
			{
				if ((this._OccasionId != value))
				{
					this.OnOccasionIdChanging(value);
					this.SendPropertyChanging();
					this._OccasionId = value;
					this.SendPropertyChanged("OccasionId");
					this.OnOccasionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccasionName", DbType="NChar(250)")]
		public string OccasionName
		{
			get
			{
				return this._OccasionName;
			}
			set
			{
				if ((this._OccasionName != value))
				{
					this.OnOccasionNameChanging(value);
					this.SendPropertyChanging();
					this._OccasionName = value;
					this.SendPropertyChanged("OccasionName");
					this.OnOccasionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="Int")]
		public System.Nullable<int> EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccasionDescription", DbType="NVarChar(4000)")]
		public string OccasionDescription
		{
			get
			{
				return this._OccasionDescription;
			}
			set
			{
				if ((this._OccasionDescription != value))
				{
					this.OnOccasionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._OccasionDescription = value;
					this.SendPropertyChanged("OccasionDescription");
					this.OnOccasionDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccasionPostedByUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OccasionPostedByUserId
		{
			get
			{
				return this._OccasionPostedByUserId;
			}
			set
			{
				if ((this._OccasionPostedByUserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOccasionPostedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._OccasionPostedByUserId = value;
					this.SendPropertyChanged("OccasionPostedByUserId");
					this.OnOccasionPostedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccasionStartDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime OccasionStartDate
		{
			get
			{
				return this._OccasionStartDate;
			}
			set
			{
				if ((this._OccasionStartDate != value))
				{
					this.OnOccasionStartDateChanging(value);
					this.SendPropertyChanging();
					this._OccasionStartDate = value;
					this.SendPropertyChanged("OccasionStartDate");
					this.OnOccasionStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccasionEndDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime OccasionEndDate
		{
			get
			{
				return this._OccasionEndDate;
			}
			set
			{
				if ((this._OccasionEndDate != value))
				{
					this.OnOccasionEndDateChanging(value);
					this.SendPropertyChanging();
					this._OccasionEndDate = value;
					this.SendPropertyChanged("OccasionEndDate");
					this.OnOccasionEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_Occasion", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.Occasions.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.Occasions.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Occasion", Storage="_aspnet_User", ThisKey="OccasionPostedByUserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Occasions.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Occasions.Add(this);
						this._OccasionPostedByUserId = value.UserId;
					}
					else
					{
						this._OccasionPostedByUserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityPhone")]
	public partial class EntityPhone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntityId;
		
		private int _PhoneId;
		
		private EntityRef<Phone> _Phone;
		
		private EntityRef<Entity> _Entity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityIdChanging(int value);
    partial void OnEntityIdChanged();
    partial void OnPhoneIdChanging(int value);
    partial void OnPhoneIdChanged();
    #endregion
		
		public EntityPhone()
		{
			this._Phone = default(EntityRef<Phone>);
			this._Entity = default(EntityRef<Entity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PhoneId
		{
			get
			{
				return this._PhoneId;
			}
			set
			{
				if ((this._PhoneId != value))
				{
					if (this._Phone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneId = value;
					this.SendPropertyChanged("PhoneId");
					this.OnPhoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phone_EntityPhone", Storage="_Phone", ThisKey="PhoneId", OtherKey="PhoneId", IsForeignKey=true)]
		public Phone Phone
		{
			get
			{
				return this._Phone.Entity;
			}
			set
			{
				Phone previousValue = this._Phone.Entity;
				if (((previousValue != value) 
							|| (this._Phone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phone.Entity = null;
						previousValue.EntityPhones.Remove(this);
					}
					this._Phone.Entity = value;
					if ((value != null))
					{
						value.EntityPhones.Add(this);
						this._PhoneId = value.PhoneId;
					}
					else
					{
						this._PhoneId = default(int);
					}
					this.SendPropertyChanged("Phone");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityPhone", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.EntityPhones.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.EntityPhones.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(int);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityCategory")]
	public partial class EntityCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntitryCategoryId;
		
		private string _EntityCategoryName;
		
		private EntitySet<Entity> _Entities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntitryCategoryIdChanging(int value);
    partial void OnEntitryCategoryIdChanged();
    partial void OnEntityCategoryNameChanging(string value);
    partial void OnEntityCategoryNameChanged();
    #endregion
		
		public EntityCategory()
		{
			this._Entities = new EntitySet<Entity>(new Action<Entity>(this.attach_Entities), new Action<Entity>(this.detach_Entities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntitryCategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EntitryCategoryId
		{
			get
			{
				return this._EntitryCategoryId;
			}
			set
			{
				if ((this._EntitryCategoryId != value))
				{
					this.OnEntitryCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._EntitryCategoryId = value;
					this.SendPropertyChanged("EntitryCategoryId");
					this.OnEntitryCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityCategoryName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string EntityCategoryName
		{
			get
			{
				return this._EntityCategoryName;
			}
			set
			{
				if ((this._EntityCategoryName != value))
				{
					this.OnEntityCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._EntityCategoryName = value;
					this.SendPropertyChanged("EntityCategoryName");
					this.OnEntityCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityCategory_Entity", Storage="_Entities", ThisKey="EntitryCategoryId", OtherKey="EntitryCategoryId")]
		public EntitySet<Entity> Entities
		{
			get
			{
				return this._Entities;
			}
			set
			{
				this._Entities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.EntityCategory = this;
		}
		
		private void detach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.EntityCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityAddress")]
	public partial class EntityAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntityId;
		
		private int _AddressId;
		
		private EntityRef<Entity> _Entity;
		
		private EntityRef<Address> _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityIdChanging(int value);
    partial void OnEntityIdChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    #endregion
		
		public EntityAddress()
		{
			this._Entity = default(EntityRef<Entity>);
			this._Address = default(EntityRef<Address>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityAddress", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.EntityAddresses.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.EntityAddresses.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(int);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_EntityAddress", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.EntityAddresses.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.EntityAddresses.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Entity")]
	public partial class Entity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntityId;
		
		private int _EntitryCategoryId;
		
		private string _EntityName;
		
		private string _EntityDescription;
		
		private EntitySet<Occasion> _Occasions;
		
		private EntitySet<EntityPhone> _EntityPhones;
		
		private EntitySet<EntityAddress> _EntityAddresses;
		
		private EntityRef<EntityCategory> _EntityCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityIdChanging(int value);
    partial void OnEntityIdChanged();
    partial void OnEntitryCategoryIdChanging(int value);
    partial void OnEntitryCategoryIdChanged();
    partial void OnEntityNameChanging(string value);
    partial void OnEntityNameChanged();
    partial void OnEntityDescriptionChanging(string value);
    partial void OnEntityDescriptionChanged();
    #endregion
		
		public Entity()
		{
			this._Occasions = new EntitySet<Occasion>(new Action<Occasion>(this.attach_Occasions), new Action<Occasion>(this.detach_Occasions));
			this._EntityPhones = new EntitySet<EntityPhone>(new Action<EntityPhone>(this.attach_EntityPhones), new Action<EntityPhone>(this.detach_EntityPhones));
			this._EntityAddresses = new EntitySet<EntityAddress>(new Action<EntityAddress>(this.attach_EntityAddresses), new Action<EntityAddress>(this.detach_EntityAddresses));
			this._EntityCategory = default(EntityRef<EntityCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntitryCategoryId", DbType="Int NOT NULL")]
		public int EntitryCategoryId
		{
			get
			{
				return this._EntitryCategoryId;
			}
			set
			{
				if ((this._EntitryCategoryId != value))
				{
					if (this._EntityCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntitryCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._EntitryCategoryId = value;
					this.SendPropertyChanged("EntitryCategoryId");
					this.OnEntitryCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string EntityName
		{
			get
			{
				return this._EntityName;
			}
			set
			{
				if ((this._EntityName != value))
				{
					this.OnEntityNameChanging(value);
					this.SendPropertyChanging();
					this._EntityName = value;
					this.SendPropertyChanged("EntityName");
					this.OnEntityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityDescription", DbType="NVarChar(4000)")]
		public string EntityDescription
		{
			get
			{
				return this._EntityDescription;
			}
			set
			{
				if ((this._EntityDescription != value))
				{
					this.OnEntityDescriptionChanging(value);
					this.SendPropertyChanging();
					this._EntityDescription = value;
					this.SendPropertyChanged("EntityDescription");
					this.OnEntityDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_Occasion", Storage="_Occasions", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<Occasion> Occasions
		{
			get
			{
				return this._Occasions;
			}
			set
			{
				this._Occasions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityPhone", Storage="_EntityPhones", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<EntityPhone> EntityPhones
		{
			get
			{
				return this._EntityPhones;
			}
			set
			{
				this._EntityPhones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Entity_EntityAddress", Storage="_EntityAddresses", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<EntityAddress> EntityAddresses
		{
			get
			{
				return this._EntityAddresses;
			}
			set
			{
				this._EntityAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityCategory_Entity", Storage="_EntityCategory", ThisKey="EntitryCategoryId", OtherKey="EntitryCategoryId", IsForeignKey=true)]
		public EntityCategory EntityCategory
		{
			get
			{
				return this._EntityCategory.Entity;
			}
			set
			{
				EntityCategory previousValue = this._EntityCategory.Entity;
				if (((previousValue != value) 
							|| (this._EntityCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityCategory.Entity = null;
						previousValue.Entities.Remove(this);
					}
					this._EntityCategory.Entity = value;
					if ((value != null))
					{
						value.Entities.Add(this);
						this._EntitryCategoryId = value.EntitryCategoryId;
					}
					else
					{
						this._EntitryCategoryId = default(int);
					}
					this.SendPropertyChanged("EntityCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Occasions(Occasion entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_Occasions(Occasion entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_EntityPhones(EntityPhone entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_EntityPhones(EntityPhone entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
		
		private void attach_EntityAddresses(EntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_EntityAddresses(EntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntitySet<Quote> _Quotes;
		
		private EntitySet<Occasion> _Occasions;
		
		private EntitySet<Article> _Articles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._Quotes = new EntitySet<Quote>(new Action<Quote>(this.attach_Quotes), new Action<Quote>(this.detach_Quotes));
			this._Occasions = new EntitySet<Occasion>(new Action<Occasion>(this.attach_Occasions), new Action<Occasion>(this.detach_Occasions));
			this._Articles = new EntitySet<Article>(new Action<Article>(this.attach_Articles), new Action<Article>(this.detach_Articles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Quote", Storage="_Quotes", ThisKey="UserId", OtherKey="QuoteUserId")]
		public EntitySet<Quote> Quotes
		{
			get
			{
				return this._Quotes;
			}
			set
			{
				this._Quotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Occasion", Storage="_Occasions", ThisKey="UserId", OtherKey="OccasionPostedByUserId")]
		public EntitySet<Occasion> Occasions
		{
			get
			{
				return this._Occasions;
			}
			set
			{
				this._Occasions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Article", Storage="_Articles", ThisKey="UserId", OtherKey="ArticlePostedByUserId")]
		public EntitySet<Article> Articles
		{
			get
			{
				return this._Articles;
			}
			set
			{
				this._Articles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Quotes(Quote entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Quotes(Quote entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Occasions(Occasion entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Occasions(Occasion entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArticleCategory")]
	public partial class ArticleCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArticleCategoryId;
		
		private string _ArticleCategoryLabel;
		
		private EntitySet<Article> _Articles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArticleCategoryIdChanging(int value);
    partial void OnArticleCategoryIdChanged();
    partial void OnArticleCategoryLabelChanging(string value);
    partial void OnArticleCategoryLabelChanged();
    #endregion
		
		public ArticleCategory()
		{
			this._Articles = new EntitySet<Article>(new Action<Article>(this.attach_Articles), new Action<Article>(this.detach_Articles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleCategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArticleCategoryId
		{
			get
			{
				return this._ArticleCategoryId;
			}
			set
			{
				if ((this._ArticleCategoryId != value))
				{
					this.OnArticleCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleCategoryId = value;
					this.SendPropertyChanged("ArticleCategoryId");
					this.OnArticleCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleCategoryLabel", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string ArticleCategoryLabel
		{
			get
			{
				return this._ArticleCategoryLabel;
			}
			set
			{
				if ((this._ArticleCategoryLabel != value))
				{
					this.OnArticleCategoryLabelChanging(value);
					this.SendPropertyChanging();
					this._ArticleCategoryLabel = value;
					this.SendPropertyChanged("ArticleCategoryLabel");
					this.OnArticleCategoryLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArticleCategory_Article", Storage="_Articles", ThisKey="ArticleCategoryId", OtherKey="ArticleCategoryId")]
		public EntitySet<Article> Articles
		{
			get
			{
				return this._Articles;
			}
			set
			{
				this._Articles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.ArticleCategory = this;
		}
		
		private void detach_Articles(Article entity)
		{
			this.SendPropertyChanging();
			entity.ArticleCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArticleId;
		
		private int _ArticleCategoryId;
		
		private System.Guid _ArticlePostedByUserId;
		
		private string _ArticleTitle;
		
		private string _ArticleDescription;
		
		private string _ArticleURL;
		
		private System.DateTime _ArticleDate;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<ArticleCategory> _ArticleCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArticleIdChanging(int value);
    partial void OnArticleIdChanged();
    partial void OnArticleCategoryIdChanging(int value);
    partial void OnArticleCategoryIdChanged();
    partial void OnArticlePostedByUserIdChanging(System.Guid value);
    partial void OnArticlePostedByUserIdChanged();
    partial void OnArticleTitleChanging(string value);
    partial void OnArticleTitleChanged();
    partial void OnArticleDescriptionChanging(string value);
    partial void OnArticleDescriptionChanged();
    partial void OnArticleURLChanging(string value);
    partial void OnArticleURLChanged();
    partial void OnArticleDateChanging(System.DateTime value);
    partial void OnArticleDateChanged();
    #endregion
		
		public Article()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._ArticleCategory = default(EntityRef<ArticleCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArticleId
		{
			get
			{
				return this._ArticleId;
			}
			set
			{
				if ((this._ArticleId != value))
				{
					this.OnArticleIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleId = value;
					this.SendPropertyChanged("ArticleId");
					this.OnArticleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleCategoryId", DbType="Int NOT NULL")]
		public int ArticleCategoryId
		{
			get
			{
				return this._ArticleCategoryId;
			}
			set
			{
				if ((this._ArticleCategoryId != value))
				{
					if (this._ArticleCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticleCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ArticleCategoryId = value;
					this.SendPropertyChanged("ArticleCategoryId");
					this.OnArticleCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticlePostedByUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ArticlePostedByUserId
		{
			get
			{
				return this._ArticlePostedByUserId;
			}
			set
			{
				if ((this._ArticlePostedByUserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArticlePostedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._ArticlePostedByUserId = value;
					this.SendPropertyChanged("ArticlePostedByUserId");
					this.OnArticlePostedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleTitle", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string ArticleTitle
		{
			get
			{
				return this._ArticleTitle;
			}
			set
			{
				if ((this._ArticleTitle != value))
				{
					this.OnArticleTitleChanging(value);
					this.SendPropertyChanging();
					this._ArticleTitle = value;
					this.SendPropertyChanged("ArticleTitle");
					this.OnArticleTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleDescription", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string ArticleDescription
		{
			get
			{
				return this._ArticleDescription;
			}
			set
			{
				if ((this._ArticleDescription != value))
				{
					this.OnArticleDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ArticleDescription = value;
					this.SendPropertyChanged("ArticleDescription");
					this.OnArticleDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleURL", DbType="NVarChar(500)")]
		public string ArticleURL
		{
			get
			{
				return this._ArticleURL;
			}
			set
			{
				if ((this._ArticleURL != value))
				{
					this.OnArticleURLChanging(value);
					this.SendPropertyChanging();
					this._ArticleURL = value;
					this.SendPropertyChanged("ArticleURL");
					this.OnArticleURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArticleDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ArticleDate
		{
			get
			{
				return this._ArticleDate;
			}
			set
			{
				if ((this._ArticleDate != value))
				{
					this.OnArticleDateChanging(value);
					this.SendPropertyChanging();
					this._ArticleDate = value;
					this.SendPropertyChanged("ArticleDate");
					this.OnArticleDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_Article", Storage="_aspnet_User", ThisKey="ArticlePostedByUserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.Articles.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.Articles.Add(this);
						this._ArticlePostedByUserId = value.UserId;
					}
					else
					{
						this._ArticlePostedByUserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArticleCategory_Article", Storage="_ArticleCategory", ThisKey="ArticleCategoryId", OtherKey="ArticleCategoryId", IsForeignKey=true)]
		public ArticleCategory ArticleCategory
		{
			get
			{
				return this._ArticleCategory.Entity;
			}
			set
			{
				ArticleCategory previousValue = this._ArticleCategory.Entity;
				if (((previousValue != value) 
							|| (this._ArticleCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArticleCategory.Entity = null;
						previousValue.Articles.Remove(this);
					}
					this._ArticleCategory.Entity = value;
					if ((value != null))
					{
						value.Articles.Add(this);
						this._ArticleCategoryId = value.ArticleCategoryId;
					}
					else
					{
						this._ArticleCategoryId = default(int);
					}
					this.SendPropertyChanged("ArticleCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressId;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Address3;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private EntitySet<EntityAddress> _EntityAddresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnAddress3Changing(string value);
    partial void OnAddress3Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    #endregion
		
		public Address()
		{
			this._EntityAddresses = new EntitySet<EntityAddress>(new Action<EntityAddress>(this.attach_EntityAddresses), new Action<EntityAddress>(this.detach_EntityAddresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="NVarChar(250)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="NVarChar(250)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address3", DbType="NVarChar(250)")]
		public string Address3
		{
			get
			{
				return this._Address3;
			}
			set
			{
				if ((this._Address3 != value))
				{
					this.OnAddress3Changing(value);
					this.SendPropertyChanging();
					this._Address3 = value;
					this.SendPropertyChanged("Address3");
					this.OnAddress3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(250)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="NVarChar(250)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="NVarChar(25)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_EntityAddress", Storage="_EntityAddresses", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<EntityAddress> EntityAddresses
		{
			get
			{
				return this._EntityAddresses;
			}
			set
			{
				this._EntityAddresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntityAddresses(EntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_EntityAddresses(EntityAddress entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
}
#pragma warning restore 1591
